## read a character from stdin, save it to a global, write it to stdout
#
# To run:
#   $ subx translate ex4.subx ex4
#   $ subx run ex4

== 0x08048074  # code segment, after leaving room for ELF header and segment headers
# instruction                     effective address                                           operand     displacement    immediate
# op          subop               mod             rm32          base      index     scale     r32
# 1-3 bytes   3 bits              2 bits          3 bits        3 bits    3 bits    2 bits    2 bits      0/1/2/4 bytes   0/1/2/4 bytes

  ## read(stdin, x, 1)
  # fd = 0 (stdin)
  bb                                                                                                                      0/imm32           # copy 0 to EBX
  # set location to write to
  b9                                                                                                                      0x080490a7/imm32  # copy to ECX
  # size = 1 character
  ba                                                                                                                      1/imm32           # copy 1 to EDX
  # syscall = read
  b8                                                                                                                      3/imm32           # copy 3 to EAX
  # call
  cd                                                                                                                      128/imm8          # int 80h

  ## write(stdout, x, 1)
  # fd = 1 (stdout)
  bb                                                                                                                      1/imm32           # copy 1 to EBX
  # set location to write to
  b9                                                                                                                      0x080490a7/imm32  # copy to ECX
  # size = 1 character
  ba                                                                                                                      1/imm32           # copy 1 to EDX
  # syscall = write
  b8                                                                                                                      4/imm32           # copy 4 to EAX
  # call
  cd                                                                                                                      128/imm8          # int 80h

  ## exit(EBX)
  b8                                                                                                                      1/imm32           # copy 1 to EAX
  cd                                                                                                                      128/imm8          # int 80h

== 0x080490a7
00 00 00 00  # space for read() to write to

# vim:ft=subx:nowrap
