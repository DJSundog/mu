## compute the factorial of 5, and return the result in the exit code
#
# To run:
#   $ subx translate apps/factorial.subx -o apps/factorial
#   $ subx run apps/factorial
# Expected result:
#   $ echo $?
#   120
#
# You can also run the automated test suite:
#   $ subx run apps/factorial test
# Expected output:
#   ........
# Every '.' indicates a passing test. Failing tests get a 'F'.
# When running tests the exit status doesn't mean anything. Yet.

== code
# instruction                     effective address                                                   operand     displacement    immediate
# op          subop               mod             rm32          base        index         scale       r32
# 1-3 bytes   3 bits              2 bits          3 bits        3 bits      3 bits        2 bits      2 bits      0/1/2/4 bytes   0/1/2/4 bytes

# main:
  # prolog
  89/copy                         3/mod/direct    5/rm32/EBP    .           .             .           4/r32/ESP   .               .                 # copy ESP to EBP
  # if (argc > 1)
  81          7/subop/compare     1/mod/*+disp8   4/rm32/SIB    5/base/EBP  4/index/none  .           .           0/disp8         1/imm32           # compare *EBP with 1
  7e/jump-if-lesser-or-equal  $run_main/disp8
  # and if (argv[1] == "test")
    # push args
  68/push  "test"/imm32
  ff          6/subop/push        1/mod/*+disp8   4/rm32/sib    5/base/EBP  4/index/none  .           .           0x8/disp8       .                 # push *(EBP+8)
    # call
  e8/call  argv_equal/disp32
    # discard args
  81          0/subop/add         3/mod/direct    4/rm32/ESP    .           .             .           .           .               8/imm32           # add 8 to ESP
    # check result
  3d/compare                      .               .             .           .             .           .           .               1/imm32           # compare EAX with 1
  75/jump-if-not-equal  $run_main/disp8
  # then
  e8/call  run_tests/disp32
  eb/jump  $main_exit/disp8
  # else EAX <- factorial(5)
$run_main:
    # push arg
  68/push  5/imm32
    # EAX <- call
  e8/call  factorial/disp32
    # discard arg
  81          0/subop/add         3/mod/direct    4/rm32/ESP    .           .             .           .           .               4/imm32           # add 4 to ESP
$main_exit:
  # exit(EAX)
  89/copy                         3/mod/direct    3/rm32/EBX    .           .             .           0/r32/EAX   .               .                 # copy EAX to EBX
  b8/copy                         .               .             .           .             .           .           .               1/imm32           # copy 1 to EAX
  cd/syscall  0x80/imm8

# factorial(n)
factorial:
  # prolog
  55/push-EBP
  89/copy                         3/mod/direct    5/rm32/EBP    .           .             .           4/r32/ESP   .               .                 # copy ESP to EBP
  53/push-EBX
  # initialize EAX to 1 (base case)
  b8/copy                         .               .             .           .             .           .           .               1/imm32           # copy 1 to EAX
  # if (n <= 1) jump exit
  81          7/subop/compare     1/mod/*+disp8   4/rm32/sib    5/base/EBP  4/index/none  .           .           8/disp8         1/imm32           # compare *(EBP+8) with 1
  7e/jump-if-<=  $factorial:exit/disp8
  # EBX: n-1
  8b/copy                         1/mod/*+disp8   4/rm32/sib    5/base/EBP  4/index/none              3/r32/EBX   8/disp8         .                 # copy *(EBP+8) to EBX
  81          5/subop/subtract    3/mod/direct    3/rm32/EBX    .           .             .           .           .               1/imm32           # subtract 1 from EBX
  # EAX: factorial(n-1)
  53/push-EBX
  e8/call                         .               .             .           .             .           .           factorial/disp32
  # discard arg
  81          0/subop/add         3/mod/direct    4/rm32/ESP    .           .             .           .           .               4/imm32           # add 4 to ESP
  # return n * factorial(n-1)
  f7          4/subop/multiply    1/mod/*+disp8   4/rm32/sib    5/base/EBP  4/index/none                          8/disp8         .                 # multiply *(EBP+8) into EAX
  # TODO: check for overflow
$factorial:exit:
  # epilog
  5b/pop-to-EBX
  89/copy                         3/mod/direct    4/rm32/ESP    .           .             .           5/r32/EBP   .               .                 # copy EBP to ESP
  5d/pop-to-EBP
  c3/return

test_factorial:
  # factorial(5)
    # push arg
  68/push  5/imm32
    # call
  e8/call  factorial/disp32
    # discard arg
  81          0/subop/add         3/mod/direct    4/rm32/ESP    .           .             .           .           .               4/imm32           # add 4 to ESP
  # check_ints_equal(EAX, 120, failure message)
    # push args
  68/push  "F - test_factorial"/imm32
  68/push  0x78/imm32/expected-120
  50/push-EAX
    # call
  e8/call  check_ints_equal/disp32
    # discard args
  81          0/subop/add         3/mod/direct    4/rm32/ESP    .           .             .           .           .               0xc/imm32         # add 12 to ESP
  # end
  c3/return

## helpers

# print msg to stderr if a != b, otherwise print "."
check_ints_equal:  # (a : int, b : int, msg : (address array byte)) -> boolean
  # prolog
  55/push-EBP
  89/copy                         3/mod/direct    5/rm32/EBP    .           .             .           4/r32/ESP   .               .                 # copy ESP to EBP
  # save registers
  51/push-ECX
  53/push-EBX
  # load args into EAX, EBX and ECX
  8b/copy                         1/mod/*+disp8   4/rm32/sib    5/base/EBP  4/index/none  .           0/r32/EAX   0x8/disp8       .                 # copy *(EBP+8) to EAX
  8b/copy                         1/mod/*+disp8   4/rm32/sib    5/base/EBP  4/index/none  .           3/r32/EBX   0xc/disp8       .                 # copy *(EBP+12) to EBX
  # if EAX == b/EBX
  39/compare                      3/mod/direct    0/rm32/EAX    .           .             .           3/r32/EBX   .               .                 # compare EAX and EBX
  75/jump-if-unequal  $check_ints_equal:else/disp8
    # print('.')
      # push args
  68/push  "."/imm32
      # call
  e8/call  write_stderr/disp32
      # discard arg
  81          0/subop/add         3/mod/direct    4/rm32/ESP    .           .             .           .           .               4/imm32           # add 4 to ESP
    # return
  eb/jump  $check_ints_equal:end/disp8
  # else:
$check_ints_equal:else:
  # copy msg into ECX
  8b/copy                         1/mod/*+disp8   4/rm32/sib    5/base/EBP  4/index/none  .           1/r32/ECX   0x10/disp8       .                # copy *(EBP+16) to ECX
    # print(ECX)
      # push args
  51/push-ECX
      # call
  e8/call  write_stderr/disp32
      # discard arg
  81          0/subop/add         3/mod/direct    4/rm32/ESP    .           .             .           .           .               4/imm32           # add 4 to ESP
    # print newline
      # push args
  68/push  Newline/imm32
      # call
  e8/call  write_stderr/disp32
      # discard arg
  81          0/subop/add         3/mod/direct    4/rm32/ESP    .           .             .           .           .               4/imm32           # add 4 to ESP
$check_ints_equal:end:
  # restore registers
  5b/pop-to-EBX
  59/pop-to-ECX
  # end
  89/copy                         3/mod/direct    4/rm32/ESP    .           .             .           5/r32/EBP   .               .                 # copy EBP to ESP
  5d/pop-to-EBP
  c3/return

# compare a null-terminated ascii string with a more idiomatic length-prefixed byte array
# reason for the name: the only place we should have null-terminated ascii strings is from commandline args
argv_equal:  # s : null-terminated ascii string, benchmark : length-prefixed ascii string -> EAX : boolean
  # prolog
  55/push-EBP
  89/copy                         3/mod/direct    5/rm32/EBP    .           .             .           4/r32/ESP   .               .                 # copy ESP to EBP
  # save registers
  51/push-ECX
  52/push-EDX
  53/push-EBX
  56/push-ESI
  57/push-EDI

  # pseudocode:
  #   initialize n = b.length
  #   initialize s1 = s
  #   initialize s2 = b.data
  #   i = 0
  #   for (i = 0; i < n; ++n)
  #     c1 = *s1
  #     c2 = *s2
  #     if c1 == 0
  #       return false
  #     if c1 != c2
  #       return false
  #   return *s1 == 0
# {{{
  # initialize s into EDI
  8b/copy                         1/mod/*+disp8   4/rm32/sib    5/base/EBP  4/index/none  .           7/r32/EDI   8/disp8         .                 # copy *(EBP+8) to EDI
  # initialize benchmark length n into EDX
  8b/copy                         1/mod/*+disp8   4/rm32/sib    5/base/EBP  4/index/none  .           2/r32/EDX   0xc/disp8       .                 # copy *(EBP+12) to EDX
  8b/copy                         0/mod/indirect  2/rm32/EDX    .           .             .           2/r32/EDX   .               .                 # copy *EDX to EDX
  # initialize benchmark data into ESI
  8b/copy                         1/mod/*+disp8   4/rm32/sib    5/base/EBP  4/index/none  .           6/r32/ESI   0xc/disp8       .                 # copy *(EBP+12) to ESI
  81          0/subop/add         3/mod/direct    6/rm32/ESI    .           .             .           .           .               4/imm32           # add 4 to ESI
  # initialize loop counter i into ECX
  b9/copy                         .               .             .           .             .           .           .               0/imm32/exit      # copy 1 to ECX
  # while (i/ECX < n/EDX)
$argv_loop:
  39/compare                      3/mod/direct    1/rm32/ECX    .           .             .           2/r32/EDX   .               .                 # compare ECX with EDX
  74/jump-if-equal  $argv_break/disp8
    # c1/EAX, c2/EBX = *s, *benchmark
  b8/copy  0/imm32  # clear EAX
  8a/copy                         0/mod/indirect  7/rm32/EDI    .           .             .           0/r32/EAX   .               .                 # copy byte at *EDI to lower byte of EAX
  bb/copy  0/imm32  # clear EBX
  8a/copy                         0/mod/indirect  6/rm32/ESI    .           .             .           3/r32/EBX   .               .                 # copy byte at *ESI to lower byte of EBX
    # if (c1 == 0) return false
  3d/compare                      .               .             .           .             .           .           .               0/imm32           # compare EAX with 0
  74/jump-if-equal  $argv_fail/disp8
    # if (c1 != c2) return false
  39/compare                      3/mod/direct    0/rm32/EAX    .           .             .           3/r32/EBX   .               .                 # compare EAX with EBX
  75/jump-if-not-equal  $argv_fail/disp8
    # ++s1, ++s2, ++i
  41/inc-ECX
  46/inc-ESI
  47/inc-EDI
  # end while
  eb/jump  $argv_loop/disp8
$argv_break:
  # if (*s/EDI == 0) return true
  b8/copy  0/imm32  # clear EAX
  8a/copy                         0/mod/indirect  7/rm32/EDI    .           .             .           0/r32/EAX   .               .                 # copy byte at *EDI to lower byte of EAX
  81          7/subop/compare     3/mod/direct    0/rm32/EAX    .           .             .           .           .               0/imm32           # compare EAX with 0
  75/jump-if-not-equal  $argv_fail/disp8
  b8/copy                         .               .             .           .             .           .           .               1/imm32           # copy 1 to EAX
  eb/jump  $argv_end/disp8
  # return false
$argv_fail:
  b8/copy                         .               .             .           .             .           .           .               0/imm32           # copy 0 to EAX

$argv_end:
  # restore registers
  5f/pop-to-EDI
  5e/pop-to-ESI
  5b/pop-to-EBX
  5a/pop-to-EDX
  59/pop-to-ECX
  # end
  89/copy                         3/mod/direct    4/rm32/ESP    .           .             .           5/r32/EBP   .               .                 # copy EBP to ESP
  5d/pop-to-EBP
  c3/return
# }}}
# tests for argv_equal {{{
test_compare_null_argv_with_empty_array:
  # EAX = argv_equal(Null_argv, "")
    # push args
  68/push  ""/imm32
  68/push  Null_argv/imm32
    # call
  e8/call  argv_equal/disp32
    # discard args
  81          0/subop/add         3/mod/direct    4/rm32/ESP    .           .             .           .           .               8/imm32           # add 8 to ESP
  # call check_ints_equal(EAX, 1, msg)
    # push args
  68/push  "F - test_compare_null_argv_with_empty_array"/imm32
  68/push  1/imm32/true
  50/push-EAX
    # call
  e8/call  check_ints_equal/disp32
    # discard args
  81          0/subop/add         3/mod/direct    4/rm32/ESP    .           .             .           .           .               0xc/imm32         # add 12 to ESP
  c3/return

test_compare_null_argv_with_non_empty_array:
  # EAX = argv_equal(Null_argv, "Abc")
    # push args
  68/push  "Abc"/imm32
  68/push  Null_argv/imm32
    # call
  e8/call  argv_equal/disp32
    # discard args
  81          0/subop/add         3/mod/direct    4/rm32/ESP    .           .             .           .           .               8/imm32           # add 8 to ESP
  # call check_ints_equal(EAX, 0, msg)
    # push args
  68/push  "F - test_compare_null_argv_with_non_empty_array"/imm32
  68/push  0/imm32/false
  50/push-EAX
    # call
  e8/call  check_ints_equal/disp32
    # discard args
  81          0/subop/add         3/mod/direct    4/rm32/ESP    .           .             .           .           .               0xc/imm32         # add 12 to ESP
  c3/return

test_compare_argv_with_equal_array:
  # EAX = argv_equal(Abc_argv, "Abc")
    # push args
  68/push  "Abc"/imm32
  68/push  Abc_argv/imm32
    # call
  e8/call  argv_equal/disp32
    # discard args
  81          0/subop/add         3/mod/direct    4/rm32/ESP    .           .             .           .           .               8/imm32           # add 8 to ESP
  # call check_ints_equal(EAX, 1, msg)
    # push args
  68/push  "F - test_compare_argv_with_equal_array"/imm32
  68/push  1/imm32/true
  50/push-EAX
    # call
  e8/call  check_ints_equal/disp32
    # discard args
  81          0/subop/add         3/mod/direct    4/rm32/ESP    .           .             .           .           .               0xc/imm32         # add 12 to ESP
  c3/return

test_compare_argv_with_inequal_array:
  # EAX = argv_equal(Abc_argv, "Adc")
    # push args
  68/push  "Adc"/imm32
  68/push  Abc_argv/imm32
    # call
  e8/call  argv_equal/disp32
    # discard args
  81          0/subop/add         3/mod/direct    4/rm32/ESP    .           .             .           .           .               8/imm32           # add 8 to ESP
  # call check_ints_equal(EAX, 0, msg)
    # push args
  68/push  "F - test_compare_argv_with_equal_array"/imm32
  68/push  0/imm32/false
  50/push-EAX
    # call
  e8/call  check_ints_equal/disp32
    # discard args
  81          0/subop/add         3/mod/direct    4/rm32/ESP    .           .             .           .           .               0xc/imm32         # add 12 to ESP
  c3/return

test_compare_argv_with_empty_array:
  # EAX = argv_equal(Abc_argv, "")
    # push args
  68/push  ""/imm32
  68/push  Abc_argv/imm32
    # call
  e8/call  argv_equal/disp32
    # discard args
  81          0/subop/add         3/mod/direct    4/rm32/ESP    .           .             .           .           .               8/imm32           # add 8 to ESP
  # call check_ints_equal(EAX, 0)
    # push args
  68/push  "F - test_compare_argv_with_equal_array"/imm32
  68/push  0/imm32/false
  50/push-EAX
    # call
  e8/call  check_ints_equal/disp32
    # discard args
  81          0/subop/add         3/mod/direct    4/rm32/ESP    .           .             .           .           .               0xc/imm32         # add 12 to ESP
  c3/return

test_compare_argv_with_shorter_array:
  # EAX = argv_equal(Abc_argv, "Ab")
    # push args
  68/push  "Ab"/imm32
  68/push  Abc_argv/imm32
    # call
  e8/call  argv_equal/disp32
    # discard args
  81          0/subop/add         3/mod/direct    4/rm32/ESP    .           .             .           .           .               8/imm32           # add 8 to ESP
  # call check_ints_equal(EAX, 0)
    # push args
  68/push  "F - test_compare_argv_with_shorter_array"/imm32
  68/push  0/imm32/false
  50/push-EAX
    # call
  e8/call  check_ints_equal/disp32
    # discard args
  81          0/subop/add         3/mod/direct    4/rm32/ESP    .           .             .           .           .               0xc/imm32         # add 12 to ESP
  c3/return

test_compare_argv_with_longer_array:
  # EAX = argv_equal(Abc_argv, "Abcd")
    # push args
  68/push  "Abcd"/imm32
  68/push  Abc_argv/imm32
    # call
  e8/call  argv_equal/disp32
    # discard args
  81          0/subop/add         3/mod/direct    4/rm32/ESP    .           .             .           .           .               8/imm32           # add 8 to ESP
  # call check_ints_equal(EAX, 0)
    # push args
  68/push  "F - test_compare_argv_with_longer_array"/imm32
  68/push  0/imm32/false
  50/push-EAX
    # call
  e8/call  check_ints_equal/disp32
    # discard args
  81          0/subop/add         3/mod/direct    4/rm32/ESP    .           .             .           .           .               0xc/imm32         # add 12 to ESP
  c3/return
# }}}

write_stderr:  # s : (address array byte) -> <void>
  # prolog
  55/push-EBP
  89/copy                         3/mod/direct    5/rm32/EBP    .           .             .           4/r32/ESP   .               .                 # copy ESP to EBP
  # save registers
  50/push-EAX
  51/push-ECX
  52/push-EDX
  53/push-EBX
  # write(2/stderr, (data) s+4, (size) *s)
    # fd = 2 (stderr)
  bb/copy                         .               .             .           .             .           .           .               2/imm32           # copy 2 to EBX
    # x = s+4
  8b/copy                         1/mod/*+disp8   4/rm32/SIB    5/base/EBP  4/index/none  .           1/r32/ECX   8/disp8         .                 # copy *(EBP+8) to ECX
  81          0/subop/add         3/mod/direct    1/rm32/ECX    .           .             .           .           .               4/imm32           # add 4 to ECX
    # size = *s
  8b/copy                         1/mod/*+disp8   4/rm32/SIB    5/base/EBP  4/index/none  .           2/r32/EDX   8/disp8         .                 # copy *(EBP+8) to EDX
  8b/copy                         0/mod/indirect  2/rm32/EDX    .           .             .           2/r32/EDX   .               .                 # copy *EDX to EDX
    # call write()
  b8/copy                         .               .             .           .             .           .           .               4/imm32/write     # copy 1 to EAX
  cd/syscall  0x80/imm8
  # restore registers
  5b/pop-to-EBX
  5a/pop-to-EDX
  59/pop-to-ECX
  58/pop-to-EAX
  # end
  89/copy                         3/mod/direct    4/rm32/ESP    .           .             .           5/r32/EBP   .               .                 # copy EBP to ESP
  5d/pop-to-EBP
  c3/return

== data
Newline:
  # size
  01 00 00 00
  # data
  0a/newline

# for argv_equal tests
Null_argv:
  00/null
Abc_argv:
  41/A 62/b 63/c 00/null

# vim:ft=subx:nowrap:so=0
