## compute the factorial of 5, and return the result in the exit code
#
# To run:
#   $ subx translate apps/factorial.subx apps/factorial
#   $ subx run apps/factorial
# Expected result:
#   $ echo $?
#   120
#
# You can also run an automated test (that does the exact same thing):
#   $ subx run apps/factorial test
# Expected output:
#   .
# Every '.' indicates a passing test. Failing tests get a 'F'.

== code
# instruction                     effective address                                                   operand     displacement    immediate
# op          subop               mod             rm32          base        index         scale       r32
# 1-3 bytes   3 bits              2 bits          3 bits        3 bits      3 bits        2 bits      2 bits      0/1/2/4 bytes   0/1/2/4 bytes

# main:
  # if (argc > 1)
  8b/copy                         0/mod/indirect  4/rm32/sib    4/base/ESP  4/index/none  .           0/r32/EAX   .               .                 # copy *ESP to EAX
  3d/compare                      .               .             .           .             .           .           .               1/imm32           # compare EAX with 1
  7e/jump-if-lesser-or-equal  $run_main/disp8
  # and if (argv[1] == "test")
  8b/copy                         1/mod/*+disp8   4/rm32/sib    4/base/ESP  4/index/none  .           0/r32/EAX   8/disp8         .                 # copy *(ESP+8) to EAX
    # push args
  68/push  Test_argv/imm32
  50/push-EAX
    # call
  e8/call  argv_equal/disp32
    # discard args
  81          0/subop/add         3/mod/direct    4/rm32/ESP    .           .             .           .           .               8/imm32           # add 8 to ESP
    # check result
  3d/compare                      .               .             .           .             .           .           .               1/imm32           # compare EAX with 1
  75/jump-if-not-equal  $run_main/disp8
  # then
  e8/call  run_tests/disp32
  eb/jump  $main_exit/disp8
  # else EAX <- factorial(5)
$run_main:
    # push arg
  68/push  5/imm32
    # EAX <- call
  e8/call  factorial/disp32
    # discard arg
  81          0/subop/add         3/mod/direct    4/rm32/ESP    .           .             .           .           .               4/imm32           # add 4 to ESP
$main_exit:
  # exit(EAX)
  89/copy                         3/mod/direct    3/rm32/EBX    .           .             .           0/r32/EAX   .               .                 # copy EAX to EBX
  b8/copy                         .               .             .           .             .           .           .               1/imm32           # copy 1 to EAX
  cd/syscall  0x80/imm8

# factorial(n)
factorial:
  # initialize EAX to 1 (base case)
  b8/copy                         .               .             .           .             .           .           .               1/imm32           # copy 1 to EAX
  # if (n <= 1) jump exit
  81          7/subop/compare     1/mod/*+disp8   4/rm32/sib    4/base/ESP  4/index/none  .           .           4/disp8         1/imm32           # compare *(ESP+4) with 1
  7e/jump-if-<=  $factorial:exit/disp8
  # EBX: n-1
  8b/copy                         1/mod/*+disp8   4/rm32/sib    4/base/ESP  4/index/none              3/r32/EBX   4/disp8         .                 # copy *(ESP+4) to EBX
  81          5/subop/subtract    3/mod/direct    3/rm32/EBX    .           .             .           .           .               1/imm32           # subtract 1 from EBX
  # prepare call
  55/push-EBP
  89/copy                         3/mod/direct    5/rm32/EBP    .           .             .           4/r32/ESP   .               .                 # copy ESP to EBP
  # EAX: factorial(n-1)
  53/push-EBX
  e8/call                         .               .             .           .             .           .           factorial/disp32
  # discard arg
  81          0/subop/add         3/mod/direct    4/rm32/ESP    .           .             .           .           .               4/imm32           # add 4 to ESP
  # clean up after call
  89/copy                         3/mod/direct    4/rm32/ESP    .           .             .           5/r32/EBP   .               .                 # copy EBP to ESP
  5d/pop                          .               .             .           .             .           .           .               .                 # pop to EBP
  # refresh n
  8b/copy                         1/mod/*+disp8   4/rm32/sib    4/base/ESP  4/index/none              2/r32/EDX   4/disp8         .                 # copy *(ESP+4) to EDX
  # return n * factorial(n-1)
  f7          4/subop/multiply    1/mod/*+disp8   4/rm32/sib    4/base/ESP  4/index/none                          4/disp8         .                 # multiply *(ESP+4) (n) into EAX (factorial(n-1))
  # TODO: check for overflow
$factorial:exit:
  c3/return

test_factorial:
  # factorial(5)
    # push arg
  68/push  5/imm32
    # call
  e8/call  factorial/disp32
    # discard arg
  81          0/subop/add         3/mod/direct    4/rm32/ESP    .           .             .           .           .               4/imm32           # add 4 to ESP
  # if EAX == 120
  3d/compare                      .               .             .           .             .           .           .               0x78/imm32/120    # compare EAX with 120
  75/jump-if-unequal              .               .             .           .             .           .           $test_factorial:else/disp8
    # print('.')
      # push args
  68/push  Test_passed/imm32
      # call
  e8/call  write_stderr/disp32
      # discard arg
  81          0/subop/add         3/mod/direct    4/rm32/ESP    .           .             .           .           .               4/imm32           # add 4 to ESP
    # return
  c3/return
  # else:
$test_factorial:else:
    # print('F')
      # push args
  68/push  Test_failed/imm32
      # call
  e8/call  write_stderr/disp32
      # discard arg
  81          0/subop/add         3/mod/direct    4/rm32/ESP    .           .             .           .           .               4/imm32           # add 4 to ESP
  # end
  c3/return

## helpers

# compare two null-terminated ascii strings
# reason for the name: the only place we should have null-terminated ascii strings is from commandline args
argv_equal:  # (s1, s2) : null-terminated ascii strings -> EAX : boolean
  # initialize s1 (ECX) and s2 (EDX)
  8b/copy                         1/mod/*+disp8   4/rm32/sib    4/base/ESP  4/index/none  .           1/r32/ECX   8/disp8         .                 # copy *(ESP+8) to ECX
  8b/copy                         1/mod/*+disp8   4/rm32/sib    4/base/ESP  4/index/none  .           2/r32/EDX   4/disp8         .                 # copy *(ESP+4) to EDX
  # while (true)
$argv_loop:
    # c1/EAX, c2/EBX = *s1, *s2
  b8/copy  0/imm32  # clear EAX
  8a/copy                         0/mod/indirect  1/rm32/ECX    .           .             .           0/r32/EAX   .               .                 # copy byte at *ECX to lower byte of EAX
  bb/copy  0/imm32  # clear EBX
  8a/copy                         0/mod/indirect  2/rm32/EDX    .           .             .           3/r32/EBX   .               .                 # copy byte at *EDX to lower byte of EBX
    # if (c1 == 0) break
  3d/compare                      .               .             .           .             .           .           .               0/imm32           # compare EAX with 0
  74/jump-if-equal  $argv_break/disp8
    # if (c1 != c2) return false
  39/compare                      3/mod/direct    0/rm32/EAX    .           .             .           3/r32/EBX   .               .                 # compare EAX with EBX
  75/jump-if-not-equal  $argv_fail/disp8
    # ++s1, ++s2
  41/inc-ECX
  42/inc-EDX
  # end while
  eb/jump  $argv_loop/disp8
$argv_break:
  # if (c2 == 0) return true
  81          7/subop/compare     3/mod/direct    3/rm32/EBX    .           .             .           .           .               0/imm32           # compare EBX with 0
  75/jump-if-not-equal  $argv_fail/disp8
  b8/copy                         .               .             .           .             .           .           .               1/imm32           # copy 1 to EAX
  c3/return
  # return false
$argv_fail:
  b8/copy                         .               .             .           .             .           .           .               0/imm32           # copy 0 to EAX
  c3/return

write_stderr:  # s : (address array byte) -> <void>
  # save registers
  50/push-EAX
  51/push-ECX
  52/push-EDX
  53/push-EBX
  # write(2/stderr, (data) s+4, (size) *s)
    # fd = 2 (stderr)
  bb/copy                         .               .             .           .             .           .           .               2/imm32           # copy 2 to EBX
    # x = s+4
  8b/copy                         1/mod/*+disp8   4/rm32/SIB    4/base/ESP  4/index/none  .           1/r32/ECX   0x14/disp8      .                 # copy *(ESP+20) to ECX
  81          0/subop/add         3/mod/direct    1/rm32/ECX    .           .             .           .           .               4/imm32           # add 4 to ECX
    # size = *s
  8b/copy                         1/mod/*+disp8   4/rm32/SIB    4/base/ESP  4/index/none  .           2/r32/EDX   0x14/disp8      .                 # copy *(ESP+20) to EDX
  8b/copy                         0/mod/indirect  2/rm32/EDX    .           .             .           2/r32/EDX   .               .                 # copy *EDX to EDX
    # call write()
  b8/copy                         .               .             .           .             .           .           .               4/imm32/write     # copy 1 to EAX
  cd/syscall  0x80/imm8
  # restore registers
  5b/pop-EBX
  5a/pop-EDX
  59/pop-ECX
  58/pop-EAX
  # end
  c3/return

== data
Test_argv:  # null-terminated
  # data
  74/t 65/e 73/s 74/t 00/null

Test_passed:
  # size
  01 00 00 00
  # data
  2e/dot

Test_failed:
  # size
  01 00 00 00
  # data
  46/F

# vim:ft=subx:nowrap:so=0
