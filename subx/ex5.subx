## read a character from stdin, save it to a local on the stack, write it to stdout
#
# To run:
#   $ subx translate ex5.subx ex5
#   $ subx run ex5

== 0x08048054  # code segment, after leaving room for ELF header and segment headers
# instruction                     effective address                                         operand     displacement    immediate
# op          subop               mod           rm32          base      index     scale     r32
# 1-3 bytes                                                                                             0/1/2/4 bytes   0/1/2/4 bytes

## function main
  # prolog
  55                                                                                                                                  # push EBP
  89                              3/mod/direct  5/rm32/EBP                                  4/r32/ESP                                 # copy ESP to EBP
  # allocate x on the stack
  81            5/subop/subtract  3/mod/direct  4/rm32/ESP                                                              4/imm32       # subtract 4 bytes from ESP

  ## read(stdin, x, 1)
  # fd = 0 (stdin)
  bb                                                                                                                    0/imm32       # copy 0 to EBX
  # set location to read character to
  89                              3/mod/direct  1/rm32/ECX                                  5/r32/EBP                                 # copy EBP to ECX
  # size = 1 character
  ba                                                                                                                    1/imm32       # copy 1 to EDX
  # syscall = read
  b8                                                                                                                    3/imm32       # copy 3 to EAX
  # call
  cd                                                                                                                    0x80/imm8     # int 80h

  ## write(stdout, x, 1)
  # fd = 1 (stdout)
  bb                                                                                                                    1/imm32       # copy 1 to EBX
  # set location of character to write out
  89                              3/mod/direct  1/rm32/ECX                                  5/r32/EBP                                 # copy EBP to ECX
                # ModR/M: 11 (direct mode) 101 (src EBP) 001 (dest ECX)
  # size = 1 character
  ba                                                                                                                    1/imm32       # copy 1 to EDX
  # syscall = write
  b8                                                                                                                    4/imm32       # copy 4 to EAX
  # call
  cd                                                                                                                    0x80/imm8     # int 80h

  ## exit(EBX)
  b8                                                                                                                    1/imm32       # copy 1 to EAX
  cd                                                                                                                    0x80/imm8     # int 80h

# vim:ft=subx:nowrap
