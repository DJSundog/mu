## read a character from stdin, save it to a local on the stack, write it to stdout
#
# To run:
#   $ subx translate ex5.subx ex5
#   $ subx run ex5

== 0x08048054  # code segment, after leaving room for ELF header and segment headers
# opcode        ModR/M                    SIB                   displacement    immediate
# instruction   mod, reg, Reg/Mem bits    scale, index, base
# 1-3 bytes     0/1 byte                  0/1 byte              0/1/2/4 bytes   0/1/2/4 bytes

## function main
  # prolog
  55                                                                                          # push EBP
  89            e5                                                                            # copy ESP to EBP
                # ModR/M: 11 (direct mode) 100 (src ESP) 101 (dest EBP)
  # allocate x on the stack
  81            ec                                                              4/imm32       # subtract 4 bytes from ESP
                # ModR/M: 11 (direct mode) 101 (subtract imm32) 100 (dest EBP)

  ## read(stdin, x, 1)
  # fd = 0 (stdin)
  bb                                                                            0/imm32       # copy 0 to EBX
  # set location to read character to
  89            e9                                                                            # copy EBP to ECX
                # ModR/M: 11 (direct mode) 101 (src EBP) 001 (dest ECX)
  # size = 1 character
  ba                                                                            1/imm32       # copy 1 to EDX
  # syscall = read
  b8                                                                            3/imm32       # copy 3 to EAX
  # call
  cd                                                                            128/imm8      # int 80h

  ## write(stdout, x, 1)
  # fd = 1 (stdout)
  bb                                                                            1/imm32       # copy 1 to EBX
  # set location of character to write out
  89            e9                                                                            # copy EBP to ECX
                # ModR/M: 11 (direct mode) 101 (src EBP) 001 (dest ECX)
  # size = 1 character
  ba                                                                            1/imm32       # copy 1 to EDX
  # syscall = write
  b8                                                                            4/imm32       # copy 4 to EAX
  # call
  cd                                                                            128/imm8      # int 80h

  ## exit(EBX)
  b8                                                                            1/imm32       # copy 1 to EAX
  cd                                                                            128/imm8      # int 80h

# vim:ft=subx:nowrap
