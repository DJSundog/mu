## example showing file syscalls
# Create a file, open it for writing, write a character to it, close it, open
# it for reading, read a character from it, close it, delete it, and return
# the character read.
#
# To run (from the subx directory):
#   $ subx translate examples/ex7.subx -o examples/ex7
#   $ subx run examples/ex7
# Expected result:
#   $ echo $?
#   97

== code
# instruction                     effective address                                                   operand     displacement    immediate
# op          subop               mod             rm32          base        index         scale       r32
# 1-3 bytes   3 bits              2 bits          3 bits        3 bits      3 bits        2 bits      2 bits      0/1/2/4 bytes   0/1/2/4 bytes

  # creat(filename)
  bb/copy-to-EBX  filename/imm32
  b9/copy-to-ECX  0x180/imm32/fixed-perms
  b8/copy-to-EAX  8/imm32/creat
  cd/syscall  0x80/imm8

  # stream = open(filename, O_WRONLY, 0)  # we can't use 'fd' because it looks like a hex byte
  bb/copy-to-EBX  filename/imm32
  b9/copy-to-ECX  1/imm32/wronly
  ba/copy-to-EDX  0x180/imm32/fixed-perms
  b8/copy-to-EAX  5/imm32/open
  cd/syscall  0x80/imm8
    # save stream
  bb/copy-to-EBX  stream/imm32
  89/copy                         0/mod/indirect  3/rm32/EBX                                          0/r32/EAX                                           # copy EAX to *EBX

  # write(stream, "a", 1)
    # load stream
  bb/copy-to-EBX  stream/imm32
  8b/copy                         0/mod/indirect  3/rm32/EBX                                          3/r32/EBX                                           # copy *EBX to EBX
    #
  b9/copy-to-ECX  a/imm32
  ba/copy-to-EDX  1/imm32/size
  b8/copy-to-EAX  4/imm32/write
  cd/syscall  0x80/imm8

  # close(stream)
    # load stream
  bb/copy-to-EBX  stream/imm32
  8b/copy                         0/mod/indirect  3/rm32/EBX                                          3/r32/EBX                                           # copy *EBX to EBX
    #
  b8/copy-to-EAX  6/imm32/close
  cd/syscall  0x80/imm8

  # stream = open(filename, O_RDONLY, 0)
  bb/copy-to-EBX  filename/imm32
  b9/copy-to-ECX  0/imm32/rdonly
  ba/copy-to-EDX  0x180/imm32/fixed-perms
  b8/copy-to-EAX  5/imm32/open
  cd/syscall  0x80/imm8
    # save stream
  bb/copy-to-EBX  stream/imm32
  89/copy                         0/mod/indirect  3/rm32/EBX                                          0/r32/EAX                                           # copy EAX to *EBX

  # read(stream, b, 1)
    # load stream
  bb/copy-to-EBX  stream/imm32
  8b/copy                         0/mod/indirect  3/rm32/EBX                                          3/r32/EBX                                           # copy *EBX to EBX
    #
  b9/copy-to-ECX  b/imm32
  ba/copy-to-EDX  1/imm32/size
  b8/copy-to-EAX  3/imm32/read
  cd/syscall  0x80/imm8

  # close(stream)
    # load stream
  bb/copy-to-EBX  stream/imm32
  8b/copy                         0/mod/indirect  3/rm32/EBX                                          3/r32/EBX                                           # copy *EBX to EBX
    #
  b8/copy-to-EAX  6/imm32/close
  cd/syscall  0x80/imm8

  # unlink(filename)
  bb/copy-to-EBX  filename/imm32
  b8/copy-to-EAX  0xa/imm32/unlink
  cd/syscall  0x80/imm8

  # exit(b)
    # load b
  bb/copy-to-EBX  b/imm32
  8b/copy                         0/mod/indirect  3/rm32/EBX                                          3/r32/EBX                                           # copy *EBX to EBX
    #
  b8/copy-to-EAX  1/imm32/exit
  cd/syscall  0x80/imm8

== data
stream:
  00 00 00 00
a:
  61 00 00 00
b:
  00 00 00 00
filename:
  2e 66 6f 6f 00 00 00 00

# vim:nowrap:textwidth=0
