# Example showing file syscalls.
#
# Create a file, open it for writing, write a character to it, close it, open
# it for reading, read a character from it, close it, delete it, and return
# the character read.
#
# To run (from the subx directory):
#   $ ./subx translate examples/ex7.subx -o examples/ex7
#   $ ./subx run examples/ex7
# Expected result:
#   $ echo $?
#   97

== code
#   instruction                     effective address                                                   register    displacement    immediate
# . op          subop               mod             rm32          base        index         scale       r32
# . 1-3 bytes   3 bits              2 bits          3 bits        3 bits      3 bits        2 bits      2 bits      0/1/2/4 bytes   0/1/2/4 bytes

    # syscall(creat, Filename)
    bb/copy-to-EBX  Filename/imm32
    b9/copy-to-ECX  0x180/imm32/fixed-perms
    b8/copy-to-EAX  8/imm32/creat
    cd/syscall  0x80/imm8

    # stream = syscall(open, Filename, O_WRONLY, 0)  # we can't use 'fd' because it looks like a hex byte
    bb/copy-to-EBX  Filename/imm32
    b9/copy-to-ECX  1/imm32/wronly
    ba/copy-to-EDX  0x180/imm32/fixed-perms
    b8/copy-to-EAX  5/imm32/open
    cd/syscall  0x80/imm8
    # save stream
    bb/copy-to-EBX  Stream/imm32
    89/copy                         0/mod/indirect  3/rm32/EBX    .           .             .           0/r32/EAX   .               .                 # copy EAX to *EBX

    # syscall(write, Stream, "a", 1)
    # . load stream
    bb/copy-to-EBX  Stream/imm32
    8b/copy                         0/mod/indirect  3/rm32/EBX    .           .             .           3/r32/EBX   .               .                 # copy *EBX to EBX
    # .
    b9/copy-to-ECX  A/imm32
    ba/copy-to-EDX  1/imm32/size
    b8/copy-to-EAX  4/imm32/write
    cd/syscall  0x80/imm8

    # syscall(close, Stream)
    # . load stream
    bb/copy-to-EBX  Stream/imm32
    8b/copy                         0/mod/indirect  3/rm32/EBX    .           .             .           3/r32/EBX   .               .                 # copy *EBX to EBX
    # .
    b8/copy-to-EAX  6/imm32/close
    cd/syscall  0x80/imm8

    # stream = syscall(open, Filename, O_RDONLY, 0)
    bb/copy-to-EBX  Filename/imm32
    b9/copy-to-ECX  0/imm32/rdonly
    ba/copy-to-EDX  0x180/imm32/fixed-perms
    b8/copy-to-EAX  5/imm32/open
    cd/syscall  0x80/imm8
    # . save Stream
    bb/copy-to-EBX  Stream/imm32
    89/copy                         0/mod/indirect  3/rm32/EBX    .           .             .           0/r32/EAX   .               .                 # copy EAX to *EBX

    # syscall(read, Stream, B, 1)
    # . load stream
    bb/copy-to-EBX  Stream/imm32
    8b/copy                         0/mod/indirect  3/rm32/EBX    .           .             .           3/r32/EBX   .               .                 # copy *EBX to EBX
    # .
    b9/copy-to-ECX  B/imm32
    ba/copy-to-EDX  1/imm32/size
    b8/copy-to-EAX  3/imm32/read
    cd/syscall  0x80/imm8

    # syscall(close, Stream)
    # . load stream
    bb/copy-to-EBX  Stream/imm32
    8b/copy                         0/mod/indirect  3/rm32/EBX    .           .             .           3/r32/EBX   .               .                 # copy *EBX to EBX
    #
    b8/copy-to-EAX  6/imm32/close
    cd/syscall  0x80/imm8

    # syscall(unlink, filename)
    bb/copy-to-EBX  Filename/imm32
    b8/copy-to-EAX  0xa/imm32/unlink
    cd/syscall  0x80/imm8

    # syscall(exit, b)
    # . load b
    bb/copy-to-EBX  B/imm32
    8b/copy                         0/mod/indirect  3/rm32/EBX    .           .             .           3/r32/EBX   .               .                 # copy *EBX to EBX
    #
    b8/copy-to-EAX  1/imm32/exit
    cd/syscall  0x80/imm8

== data

Stream:
    0/imm32
A:
    61/imm32/A
B:
    0/imm32
Filename:
    2e 66 6f 6f 00 00 00 00
#   .  f  o  o  null

# . . vim:nowrap:textwidth=0
