# String comparison: return 1 iff the two args passed in at the commandline are equal.
#
# To run (from the subx directory):
#   $ ./subx translate examples/ex10.subx -o examples/ex10
#   $ ./subx run examples/ex10 abc abd
# Expected result:
#   $ echo $?
#   0  # false

== code
#   instruction                     effective address                                                   register    displacement    immediate
# . op          subop               mod             rm32          base        index         scale       r32
# . 1-3 bytes   3 bits              2 bits          3 bits        3 bits      3 bits        2 bits      2 bits      0/1/2/4 bytes   0/1/2/4 bytes

Entry:  # return argv-equal(argv[1], argv[2])
#       At the start of a SubX program:
#         argc: *ESP
#         argv[0]: *(ESP+4)
#         argv[1]: *(ESP+8)
#         ...
    # . prolog
    89/copy                         3/mod/direct    5/rm32/EBP    .           .             .           4/r32/ESP   .               .                 # copy ESP to EBP
    # argv-equal(argv[1], argv[2])
    # . . push argv[2]
    ff          6/subop/push        1/mod/*+disp8   5/rm32/EBP    .           .             .           .           0xc/disp8       .                 # push *(EBP+12)
    # . . push argv[1]
    ff          6/subop/push        1/mod/*+disp8   5/rm32/EBP    .           .             .           .           8/disp8         .                 # push *(EBP+8)
    # . . call
    e8/call argv-equal/disp32
    # syscall(exit, EAX)
    89/copy                         3/mod/direct    3/rm32/EBX    .           .             .           0/r32/EAX   .               .                 # copy EAX to EBX
    b8/copy-to-EAX  1/imm32/exit
    cd/syscall  0x80/imm8

# compare two null-terminated ascii strings
# reason for the name: the only place we should have null-terminated ascii strings is from commandline args
argv-equal:  # (s1, s2) : null-terminated ascii strings -> EAX : boolean
    # initialize s1 (ECX) and s2 (EDX)
    8b/copy                         1/mod/*+disp8   4/rm32/sib    4/base/ESP  4/index/none  .           1/r32/ECX   4/disp8         .                 # copy *(ESP+4) to ECX
    8b/copy                         1/mod/*+disp8   4/rm32/sib    4/base/ESP  4/index/none  .           2/r32/EDX   8/disp8         .                 # copy *(ESP+8) to EDX
$argv-equal:loop:
    # c1/EAX, c2/EBX = *s1, *s2
    b8/copy-to-EAX  0/imm32
    8a/copy-byte                    0/mod/indirect  1/rm32/ECX    .           .             .           0/r32/AL    .               .                 # copy byte at *ECX to AL
    bb/copy-to-EBX  0/imm32
    8a/copy-byte                    0/mod/indirect  2/rm32/EDX    .           .             .           3/r32/BL    .               .                 # copy byte at *EDX to BL
    # if (c1 == 0) break
    3d/compare-EAX-and  0/imm32
    74/jump-if-equal  $argv-equal:break/disp8
    # if (c1 != c2) return false
    39/compare                      3/mod/direct    0/rm32/EAX    .           .             .           3/r32/EBX   .               .                 # compare EAX and EBX
    75/jump-if-not-equal  $argv-equal:false/disp8
    # ++s1, ++s2
    41/increment-ECX
    42/increment-EDX
    # end while
    eb/jump  $argv-equal:loop/disp8
$argv-equal:break:
    # if (c2 == 0) return true
    81          7/subop/compare     3/mod/direct    3/rm32/EBX    .           .             .           .           .               0/imm32           # compare EBX
    75/jump-if-not-equal  $argv-equal:false/disp8
$argv-equal:success:
    b8/copy-to-EAX  1/imm32
    c3/return
    # return false
$argv-equal:false:
    b8/copy-to-EAX  0/imm32
    c3/return

# . . vim:nowrap:textwidth=0
