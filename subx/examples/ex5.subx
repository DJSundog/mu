## read a character from stdin, save it to a local on the stack, write it to stdout
#
# To run (from the subx directory):
#   $ subx translate examples/ex5.subx -o examples/ex5
#   $ subx run examples/ex5

== code
#   instruction                     effective address                                                   operand     displacement    immediate
#   op          subop               mod             rm32          base        index         scale       r32
#   1-3 bytes   3 bits              2 bits          3 bits        3 bits      3 bits        2 bits      2 bits      0/1/2/4 bytes   0/1/2/4 bytes

# main:
    # allocate x on the stack
    81          5/subop/subtract    3/mod/direct    4/rm32/ESP    .           .             .           .           .               4/imm32           # subtract from ESP

    # syscall(read, stdin, x, 1)
    # fd = 0 (stdin)
    bb/copy-to-EBX  0/imm32
    # initialize x (location to write result to)
    8d/copy-address                 1/mod/*+disp8   4/rm32/sib    4/base/ESP  4/index/none              1/r32/ECX   4/disp8         .                 # copy ESP+4 to ECX
    # size = 1 character
    ba/copy-to-EDX  1/imm32
    # syscall
    b8/copy-to-EAX  3/imm32/read
    cd/syscall  0x80/imm8

    # syscall(write, stdout, x, 1)
    # fd = 1 (stdout)
    bb/copy-to-EBX  1/imm32
    # initialize x (location to read from)
    8d/copy-address                 1/mod/*+disp8   4/rm32/sib    4/base/ESP  4/index/none              1/r32/ECX   4/disp8         .                 # copy ESP+4 to ECX
    # size = 1 character
    ba/copy-to-EDX  1/imm32
    # syscall
    b8/copy-to-EAX  4/imm32/write
    cd/syscall  0x80/imm8

    # syscall(exit, EBX)
    b8/copy-to-EAX  1/imm32/exit
    cd/syscall  0x80/imm8

# vim:nowrap:textwidth=0
