## print out a (global variable) string to stdout
#
# To run:
#   $ subx translate ex6.subx ex6
#   $ subx run ex6
#   Hello, world!

== code
# instruction                     effective address                                                   operand     displacement    immediate
# op          subop               mod             rm32          base        index         scale       r32
# 1-3 bytes   3 bits              2 bits          3 bits        3 bits      3 bits        2 bits      2 bits      0/1/2/4 bytes   0/1/2/4 bytes

  # write(stdout, x, size)
    # fd = 1 (stdout)
  bb/copy                                                                                                                         1/imm32           # copy 1 to EBX
    # initialize x (location to write result to)
  b9/copy                                                                                                                         x/imm32           # copy to ECX
    # initialize size
  8b/copy                         0/mod/indirect  5/rm32/.disp32                                      2/r32/EDX   size/disp32                       # copy *size to EDX
    # write(fd, x, size)
  b8/copy                                                                                                                         4/imm32/write     # copy 4 to EAX
  cd/syscall                                                                                                                      0x80/imm8         # int 80h

  # exit(EBX)
  b8/copy                                                                                                                         1/imm32/exit      # copy 1 to EAX
  cd/syscall                                                                                                                      0x80/imm8         # int 80h

== data
size:  # size of string
  0e 00 00 00  # 14
x:  # string to print
  48 65 6c 6c 6f 2c 20 77 6f 72 6c 64 21 0a       00
# h  e  l  l  o  ,  ‚ê£  w  o  r  l  d  !  newline  null

# vim:ft=subx:nowrap
