# Example showing mmap syscall.
# Create a new segment using mmap, save the address, write to it.
#
# To run (from the subx directory):
#   $ subx translate examples/ex12.subx -o examples/ex12
#   $ subx run examples/ex12
# You shouldn't get a segmentation fault.

== code
#   instruction                     effective address                                                   register    displacement    immediate
# . op          subop               mod             rm32          base        index         scale       r32
# . 1-3 bytes   3 bits              2 bits          3 bits        3 bits      3 bits        2 bits      2 bits      0/1/2/4 bytes   0/1/2/4 bytes

    # syscall(mmap, 0x1000)
    bb/copy-to-EBX  Mmap-new-segment/imm32
    b8/copy-to-EAX  0x5a/imm32/mmap
    cd/syscall  0x80/imm8

    # write to *EAX to check that we have access to the newly-allocated segment
    c7/copy                         0/mod/direct    0/rm32/EAX    .           .             .           .           .               0x34/imm32              # copy to *EAX

    # syscall(exit, EAX)
    89/copy                         3/mod/direct    3/rm32/EBX    .           .             .           0/r32/EAX   .               .                       # copy EAX to EBX
    b8/copy-to-EAX  1/imm32/exit
    cd/syscall  0x80/imm8

== data

# various constants used here were found in the Linux sources (search for file mman-common.h)
Mmap-new-segment:  # type mmap_arg_struct
    # addr
    00 00 00 00  # null
    # len
    00 01 00 00  # 0x1000
    # protection flags
    03 00 00 00  # PROT_READ | PROT_WRITE
    # sharing flags
    22 00 00 00  # MAP_PRIVATE | MAP_ANONYMOUS
    # fd
    ff ff ff ff  # -1 since MAP_ANONYMOUS is specified
    # offset
    00 00 00 00  # 0 since MAP_ANONYMOUS is specified

# . . vim:nowrap:textwidth=0
