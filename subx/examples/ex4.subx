## read a character from stdin, save it to a global, write it to stdout
#
# To run:
#   $ subx translate ex4.subx ex4
#   $ subx run ex4

== code
# instruction                     effective address                                                   operand     displacement    immediate
# op          subop               mod             rm32          base        index         scale       r32
# 1-3 bytes   3 bits              2 bits          3 bits        3 bits      3 bits        2 bits      2 bits      0/1/2/4 bytes   0/1/2/4 bytes

  # read(stdin, x, 1)
    # fd = 0 (stdin)
  bb/copy                                                                                                                         0/imm32           # copy 0 to EBX
    # initialize x (location to write result to)
  b9/copy                                                                                                                         x/imm32           # copy to ECX
    # size = 1 character
  ba/copy                                                                                                                         1/imm32           # copy 1 to EDX
    # read(fd, x, size)
  b8/copy                                                                                                                         3/imm32/read      # copy 3 to EAX
  cd/syscall                                                                                                                      0x80/imm8         # int 80h

  # write(stdout, x, 1)
    # fd = 1 (stdout)
  bb/copy                                                                                                                         1/imm32           # copy 1 to EBX
    # initialize x (location to read from)
  b9/copy                                                                                                                         x/imm32           # copy to ECX
    # size = 1 character
  ba/copy                                                                                                                         1/imm32           # copy 1 to EDX
    # write(fd, x, size)
  b8/copy                                                                                                                         4/imm32/write     # copy 4 to EAX
  cd/syscall                                                                                                                      0x80/imm8         # int 80h

  # exit(EBX)
  b8/copy                                                                                                                         1/imm32/exit      # copy 1 to EAX
  cd/syscall                                                                                                                      0x80/imm8         # int 80h

== data
x:
  00 00 00 00  # space for read() to write to

# vim:ft=subx:nowrap
