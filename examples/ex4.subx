# Read a character from stdin, save it to a global, write it to stdout.
#
# To run:
#   $ ./subx translate examples/ex4.subx -o examples/ex4
#   $ ./subx run examples/ex4

== data 0x0a000000

# the global variable we save to
X:
    0/imm32  # space for read() to write to

== code 0x09000000

Entry:
# syscall(read, stdin, X, 1)
# . fd = 0 (stdin)
bb/copy-to-ebx  0/imm32
# . data = X (location to write result to)
b9/copy-to-ecx  X/imm32
# . size = 1 character
ba/copy-to-edx  1/imm32
# . syscall
b8/copy-to-eax  3/imm32/read
cd/syscall  0x80/imm8

# syscall(write, stdout, X, 1)
# . fd = 1 (stdout)
bb/copy-to-ebx  1/imm32
# . initialize X (location to read from)
b9/copy-to-ecx  X/imm32
# . size = 1 character
ba/copy-to-edx  1/imm32
# . syscall
b8/copy-to-eax  4/imm32/write
cd/syscall  0x80/imm8

# syscall(exit, ebx)
b8/copy-to-eax  1/imm32/exit
cd/syscall  0x80/imm8

# . . vim:nowrap:textwidth=0
